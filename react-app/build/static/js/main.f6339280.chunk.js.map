{"version":3,"sources":["logo.svg","components/Pothos.js","App.js","reportWebVitals.js","index.js"],"names":["Pothos","useState","sensor1","setSensor1","sensor2","setSensor2","getSoilSensor","fetch","then","res","json","i","is1Wet","is2Wet","useEffect","onClick","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAAe,I,mBC0BAA,EAxBA,WAAO,IAAD,EACWC,mBAAS,IADpB,mBACZC,EADY,KACHC,EADG,OAEWF,mBAAS,IAFpB,mBAEZG,EAFY,KAEHC,EAFG,KAIbC,EAAgB,WACpBC,MAAM,+BACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJR,EAAWQ,EAAEC,OAAS,MAAQ,OAC9BP,EAAWM,EAAEE,OAAS,MAAQ,WAMpC,OAFAC,oBAAUR,EAAe,IAGvB,gCACGJ,EADH,IACY,uBACTE,EAFH,IAEY,uBACV,wBAAQW,QAAS,kBAAMT,KAAvB,wBCTSU,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.f6339280.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState } from \"react\"\r\n\r\nconst Pothos = () => {\r\n  const [sensor1, setSensor1] = useState(\"\")\r\n  const [sensor2, setSensor2] = useState(\"\")\r\n\r\n  const getSoilSensor = () => {\r\n    fetch(\"http://10.0.0.6:8080/sensor\")\r\n      .then(res => res.json())\r\n      .then(i => {\r\n        setSensor1(i.is1Wet ? \"wet\" : \"dry\")\r\n        setSensor2(i.is2Wet ? \"wet\" : \"dry\")\r\n    })\r\n  }\r\n\r\n  useEffect(getSoilSensor, [])\r\n\r\n  return (\r\n    <div>\r\n      {sensor1} <br />\r\n      {sensor2} <br />\r\n      <button onClick={() => getSoilSensor()}>Update</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Pothos\r\n","import logo from \"./logo.svg\"\nimport \"./App.css\"\nimport Pothos from \"./components/Pothos\"\n\nfunction App() {\n  return (\n    <div>\n      <Pothos />\n    </div>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}